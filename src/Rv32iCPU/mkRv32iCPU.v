//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Sun Feb 20 16:05:51 DST 2022
//
//
// Ports:
// Name                         I/O  size props
// ibus_addr                      O    32
// RDY_ibus_addr                  O     1
// RDY_ibus_next                  O     1
// RDY_ibus_rdata                 O     1
// dbus_addr_wdata_fst            O     1
// RDY_dbus_addr_wdata_fst        O     1
// dbus_addr_wdata_snd_fst        O    32
// RDY_dbus_addr_wdata_snd_fst    O     1
// dbus_addr_wdata_snd_snd        O    32
// RDY_dbus_addr_wdata_snd_snd    O     1
// RDY_dbus_next                  O     1
// RDY_dbus_rdata                 O     1 reg
// RDY_boot                       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ibus_rdata_instr               I    32
// dbus_rdata_read_data           I    32
// boot_boot_addr                 I    32
// EN_ibus_next                   I     1
// EN_ibus_rdata                  I     1
// EN_dbus_next                   I     1
// EN_dbus_rdata                  I     1
// EN_boot                        I     1
//
// Combinational paths from inputs to outputs:
//   (ibus_rdata_instr,
//    dbus_rdata_read_data,
//    boot_boot_addr,
//    EN_ibus_rdata,
//    EN_dbus_rdata,
//    EN_boot) -> ibus_addr
//   (ibus_rdata_instr,
//    dbus_rdata_read_data,
//    EN_ibus_rdata,
//    EN_dbus_rdata,
//    EN_boot) -> RDY_ibus_addr
//   (ibus_rdata_instr,
//    dbus_rdata_read_data,
//    EN_ibus_rdata,
//    EN_dbus_rdata,
//    EN_boot) -> RDY_ibus_next
//   EN_boot -> dbus_addr_wdata_fst
//   EN_boot -> RDY_dbus_addr_wdata_fst
//   EN_boot -> dbus_addr_wdata_snd_fst
//   EN_boot -> RDY_dbus_addr_wdata_snd_fst
//   EN_boot -> dbus_addr_wdata_snd_snd
//   EN_boot -> RDY_dbus_addr_wdata_snd_snd
//   EN_boot -> RDY_dbus_next
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRv32iCPU(CLK,
		  RST_N,

		  ibus_addr,
		  RDY_ibus_addr,

		  EN_ibus_next,
		  RDY_ibus_next,

		  ibus_rdata_instr,
		  EN_ibus_rdata,
		  RDY_ibus_rdata,

		  dbus_addr_wdata_fst,
		  RDY_dbus_addr_wdata_fst,

		  dbus_addr_wdata_snd_fst,
		  RDY_dbus_addr_wdata_snd_fst,

		  dbus_addr_wdata_snd_snd,
		  RDY_dbus_addr_wdata_snd_snd,

		  EN_dbus_next,
		  RDY_dbus_next,

		  dbus_rdata_read_data,
		  EN_dbus_rdata,
		  RDY_dbus_rdata,

		  boot_boot_addr,
		  EN_boot,
		  RDY_boot);
  input  CLK;
  input  RST_N;

  // value method ibus_addr
  output [31 : 0] ibus_addr;
  output RDY_ibus_addr;

  // action method ibus_next
  input  EN_ibus_next;
  output RDY_ibus_next;

  // action method ibus_rdata
  input  [31 : 0] ibus_rdata_instr;
  input  EN_ibus_rdata;
  output RDY_ibus_rdata;

  // value method dbus_addr_wdata_fst
  output dbus_addr_wdata_fst;
  output RDY_dbus_addr_wdata_fst;

  // value method dbus_addr_wdata_snd_fst
  output [31 : 0] dbus_addr_wdata_snd_fst;
  output RDY_dbus_addr_wdata_snd_fst;

  // value method dbus_addr_wdata_snd_snd
  output [31 : 0] dbus_addr_wdata_snd_snd;
  output RDY_dbus_addr_wdata_snd_snd;

  // action method dbus_next
  input  EN_dbus_next;
  output RDY_dbus_next;

  // action method dbus_rdata
  input  [31 : 0] dbus_rdata_read_data;
  input  EN_dbus_rdata;
  output RDY_dbus_rdata;

  // action method boot
  input  [31 : 0] boot_boot_addr;
  input  EN_boot;
  output RDY_boot;

  // signals for module outputs
  wire [31 : 0] dbus_addr_wdata_snd_fst, dbus_addr_wdata_snd_snd, ibus_addr;
  wire RDY_boot,
       RDY_dbus_addr_wdata_fst,
       RDY_dbus_addr_wdata_snd_fst,
       RDY_dbus_addr_wdata_snd_snd,
       RDY_dbus_next,
       RDY_dbus_rdata,
       RDY_ibus_addr,
       RDY_ibus_next,
       RDY_ibus_rdata,
       dbus_addr_wdata_fst;

  // inlined wires
  reg [31 : 0] if_pc_enqw$wget;
  wire [196 : 0] ex_reg_x_wire$wget, wb_reg_x_wire$wget;
  wire [65 : 0] loadstore_fifo_rv$port0__write_1,
		loadstore_fifo_rv$port1__read,
		loadstore_fifo_rv$port2__read;
  wire [32 : 0] id_instr_rv$port0__write_1,
		id_instr_rv$port1__read,
		id_instr_rv$port2__read,
		wb_load_data$wget;
  wire _wset_RL_id_stage$EN_if_pc_enqw$wget,
       ex_reg_dequeueing$whas,
       ex_reg_x_wire$whas,
       id_instr_rv$EN_port1__write,
       if_pc_enqw$whas,
       loadstore_fifo_rv$EN_port0__write,
       wb_reg_dequeueing$whas,
       wb_reg_enqueueing$whas;

  // register ex_reg_cntr_r
  reg [1 : 0] ex_reg_cntr_r;
  wire [1 : 0] ex_reg_cntr_r$D_IN;
  wire ex_reg_cntr_r$EN;

  // register ex_reg_q_0
  reg [196 : 0] ex_reg_q_0;
  reg [196 : 0] ex_reg_q_0$D_IN;
  wire ex_reg_q_0$EN;

  // register ex_reg_q_1
  reg [196 : 0] ex_reg_q_1;
  reg [196 : 0] ex_reg_q_1$D_IN;
  wire ex_reg_q_1$EN;

  // register id_instr_rv
  reg [32 : 0] id_instr_rv;
  wire [32 : 0] id_instr_rv$D_IN;
  wire id_instr_rv$EN;

  // register loadstore_fifo_rv
  reg [65 : 0] loadstore_fifo_rv;
  wire [65 : 0] loadstore_fifo_rv$D_IN;
  wire loadstore_fifo_rv$EN;

  // register regfile_0
  reg [31 : 0] regfile_0;
  wire [31 : 0] regfile_0$D_IN;
  wire regfile_0$EN;

  // register regfile_1
  reg [31 : 0] regfile_1;
  wire [31 : 0] regfile_1$D_IN;
  wire regfile_1$EN;

  // register regfile_10
  reg [31 : 0] regfile_10;
  wire [31 : 0] regfile_10$D_IN;
  wire regfile_10$EN;

  // register regfile_11
  reg [31 : 0] regfile_11;
  wire [31 : 0] regfile_11$D_IN;
  wire regfile_11$EN;

  // register regfile_12
  reg [31 : 0] regfile_12;
  wire [31 : 0] regfile_12$D_IN;
  wire regfile_12$EN;

  // register regfile_13
  reg [31 : 0] regfile_13;
  wire [31 : 0] regfile_13$D_IN;
  wire regfile_13$EN;

  // register regfile_14
  reg [31 : 0] regfile_14;
  wire [31 : 0] regfile_14$D_IN;
  wire regfile_14$EN;

  // register regfile_15
  reg [31 : 0] regfile_15;
  wire [31 : 0] regfile_15$D_IN;
  wire regfile_15$EN;

  // register regfile_16
  reg [31 : 0] regfile_16;
  wire [31 : 0] regfile_16$D_IN;
  wire regfile_16$EN;

  // register regfile_17
  reg [31 : 0] regfile_17;
  wire [31 : 0] regfile_17$D_IN;
  wire regfile_17$EN;

  // register regfile_18
  reg [31 : 0] regfile_18;
  wire [31 : 0] regfile_18$D_IN;
  wire regfile_18$EN;

  // register regfile_19
  reg [31 : 0] regfile_19;
  wire [31 : 0] regfile_19$D_IN;
  wire regfile_19$EN;

  // register regfile_2
  reg [31 : 0] regfile_2;
  wire [31 : 0] regfile_2$D_IN;
  wire regfile_2$EN;

  // register regfile_20
  reg [31 : 0] regfile_20;
  wire [31 : 0] regfile_20$D_IN;
  wire regfile_20$EN;

  // register regfile_21
  reg [31 : 0] regfile_21;
  wire [31 : 0] regfile_21$D_IN;
  wire regfile_21$EN;

  // register regfile_22
  reg [31 : 0] regfile_22;
  wire [31 : 0] regfile_22$D_IN;
  wire regfile_22$EN;

  // register regfile_23
  reg [31 : 0] regfile_23;
  wire [31 : 0] regfile_23$D_IN;
  wire regfile_23$EN;

  // register regfile_24
  reg [31 : 0] regfile_24;
  wire [31 : 0] regfile_24$D_IN;
  wire regfile_24$EN;

  // register regfile_25
  reg [31 : 0] regfile_25;
  wire [31 : 0] regfile_25$D_IN;
  wire regfile_25$EN;

  // register regfile_26
  reg [31 : 0] regfile_26;
  wire [31 : 0] regfile_26$D_IN;
  wire regfile_26$EN;

  // register regfile_27
  reg [31 : 0] regfile_27;
  wire [31 : 0] regfile_27$D_IN;
  wire regfile_27$EN;

  // register regfile_28
  reg [31 : 0] regfile_28;
  wire [31 : 0] regfile_28$D_IN;
  wire regfile_28$EN;

  // register regfile_29
  reg [31 : 0] regfile_29;
  wire [31 : 0] regfile_29$D_IN;
  wire regfile_29$EN;

  // register regfile_3
  reg [31 : 0] regfile_3;
  wire [31 : 0] regfile_3$D_IN;
  wire regfile_3$EN;

  // register regfile_30
  reg [31 : 0] regfile_30;
  wire [31 : 0] regfile_30$D_IN;
  wire regfile_30$EN;

  // register regfile_31
  reg [31 : 0] regfile_31;
  wire [31 : 0] regfile_31$D_IN;
  wire regfile_31$EN;

  // register regfile_4
  reg [31 : 0] regfile_4;
  wire [31 : 0] regfile_4$D_IN;
  wire regfile_4$EN;

  // register regfile_5
  reg [31 : 0] regfile_5;
  wire [31 : 0] regfile_5$D_IN;
  wire regfile_5$EN;

  // register regfile_6
  reg [31 : 0] regfile_6;
  wire [31 : 0] regfile_6$D_IN;
  wire regfile_6$EN;

  // register regfile_7
  reg [31 : 0] regfile_7;
  wire [31 : 0] regfile_7$D_IN;
  wire regfile_7$EN;

  // register regfile_8
  reg [31 : 0] regfile_8;
  wire [31 : 0] regfile_8$D_IN;
  wire regfile_8$EN;

  // register regfile_9
  reg [31 : 0] regfile_9;
  wire [31 : 0] regfile_9$D_IN;
  wire regfile_9$EN;

  // register wb_reg_cntr_r
  reg [1 : 0] wb_reg_cntr_r;
  wire [1 : 0] wb_reg_cntr_r$D_IN;
  wire wb_reg_cntr_r$EN;

  // register wb_reg_q_0
  reg [196 : 0] wb_reg_q_0;
  reg [196 : 0] wb_reg_q_0$D_IN;
  wire wb_reg_q_0$EN;

  // register wb_reg_q_1
  reg [196 : 0] wb_reg_q_1;
  reg [196 : 0] wb_reg_q_1$D_IN;
  wire wb_reg_q_1$EN;

  // ports of submodule id_pc
  wire [31 : 0] id_pc$D_IN, id_pc$D_OUT;
  wire id_pc$CLR, id_pc$DEQ, id_pc$EMPTY_N, id_pc$ENQ, id_pc$FULL_N;

  // ports of submodule if_pc_ff
  wire [31 : 0] if_pc_ff$D_IN, if_pc_ff$D_OUT;
  wire if_pc_ff$CLR,
       if_pc_ff$DEQ,
       if_pc_ff$EMPTY_N,
       if_pc_ff$ENQ,
       if_pc_ff$FULL_N;

  // ports of submodule if_pc_firstValid
  wire if_pc_firstValid$D_IN, if_pc_firstValid$EN, if_pc_firstValid$Q_OUT;

  // rule scheduling signals
  wire WILL_FIRE_RL_ex_reg_both,
       WILL_FIRE_RL_ex_reg_decCtr,
       WILL_FIRE_RL_ex_reg_incCtr,
       WILL_FIRE_RL_ex_stage,
       WILL_FIRE_RL_id_stage,
       WILL_FIRE_RL_wb_reg_both,
       WILL_FIRE_RL_wb_reg_decCtr,
       WILL_FIRE_RL_wb_reg_incCtr;

  // inputs to muxes for submodule ports
  wire [196 : 0] MUX_ex_reg_q_0$write_1__VAL_2,
		 MUX_ex_reg_q_0$write_1__VAL_3,
		 MUX_ex_reg_q_1$write_1__VAL_2,
		 MUX_wb_reg_q_0$write_1__VAL_2,
		 MUX_wb_reg_q_0$write_1__VAL_3,
		 MUX_wb_reg_q_1$write_1__VAL_2;
  wire [31 : 0] MUX_if_pc_enqw$wset_1__VAL_1, MUX_if_pc_enqw$wset_1__VAL_2;
  wire [1 : 0] MUX_ex_reg_cntr_r$write_1__VAL_2,
	       MUX_wb_reg_cntr_r$write_1__VAL_2;
  wire MUX_ex_reg_q_0$write_1__SEL_1,
       MUX_ex_reg_q_0$write_1__SEL_2,
       MUX_ex_reg_q_1$write_1__SEL_1,
       MUX_ex_reg_q_1$write_1__SEL_2,
       MUX_if_pc_enqw$wset_1__SEL_1,
       MUX_if_pc_enqw$wset_1__SEL_2,
       MUX_wb_reg_q_0$write_1__SEL_1,
       MUX_wb_reg_q_0$write_1__SEL_2,
       MUX_wb_reg_q_1$write_1__SEL_1,
       MUX_wb_reg_q_1$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] CASE_ex_reg_q_0_BITS_43_TO_34_CONCAT_x660_0b10_ETC__q2,
	       CASE_x660_0b10111_ex_reg_q_0_BITS_196_TO_165_P_ETC__q3,
	       IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453,
	       IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310,
	       SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261,
	       SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266;
  reg [6 : 0] CASE_ex_reg_q_1_BITS_164_TO_158_3_ex_reg_q_1_B_ETC__q4,
	      CASE_ex_reg_x_wirewget_BITS_164_TO_158_3_ex_r_ETC__q11,
	      CASE_id_instr_rvport1__read_BITS_6_TO_0_3_id__ETC__q10,
	      CASE_wb_reg_q_1_BITS_164_TO_158_3_wb_reg_q_1_B_ETC__q5,
	      CASE_wb_reg_x_wirewget_BITS_164_TO_158_3_wb_r_ETC__q9,
	      x__h8660;
  reg IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364;
  wire [196 : 0] ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41,
		 wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107;
  wire [37 : 0] id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d268;
  wire [36 : 0] id_instr_rv_port1__read__42_BITS_19_TO_15_70_C_ETC___d263;
  wire [31 : 0] IF_IF_ex_reg_q_0_86_BITS_164_TO_158_37_EQ_23_7_ETC___d465,
		IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225,
		IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d446,
		IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d456,
		IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d458,
		IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d461,
		IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d445,
		IF_wb_reg_q_0_49_BIT_32_50_THEN_IF_NOT_wb_load_ETC___d227,
		SEXT_id_instr_rv_port1__read__42_BITS_31_TO_20_89___d290,
		b__h7329,
		b__h8901,
		b__h8907,
		ex_reg_q_0_86_BITS_151_TO_120_41_PLUS_ex_reg_q_ETC___d343,
		ex_reg_q_0_BITS_151_TO_120__q1;
  wire [20 : 0] id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q8;
  wire [12 : 0] id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q7;
  wire [11 : 0] b__h7532, id_instr_rvport1__read_BITS_31_TO_20__q6;
  wire [1 : 0] ex_reg_cntr_r_6_MINUS_1___d68, wb_reg_cntr_r_2_MINUS_1___d134;
  wire NOT_id_instr_rv_port1__read__42_BITS_19_TO_15__ETC___d191,
       NOT_id_instr_rv_port1__read__42_BITS_24_TO_20__ETC___d194,
       NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d179,
       NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d196,
       NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d318,
       NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d323,
       NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d198,
       NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d325,
       _dfoo1,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       ex_reg_q_0_86_BITS_151_TO_120_41_EQ_ex_reg_q_0_ETC___d348,
       ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352,
       ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356,
       id_instr_rv_port1__read__42_BITS_19_TO_15_70_E_ETC___d172,
       id_instr_rv_port1__read__42_BITS_24_TO_20_75_E_ETC___d176,
       id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d220,
       id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d265;

  // value method ibus_addr
  assign ibus_addr = if_pc_ff$EMPTY_N ? if_pc_ff$D_OUT : if_pc_enqw$wget ;
  assign RDY_ibus_addr =
	     if_pc_firstValid$Q_OUT && (if_pc_ff$EMPTY_N || if_pc_enqw$whas) ;

  // action method ibus_next
  assign RDY_ibus_next =
	     if_pc_firstValid$Q_OUT &&
	     (if_pc_ff$EMPTY_N || if_pc_enqw$whas) &&
	     id_pc$FULL_N ;

  // action method ibus_rdata
  assign RDY_ibus_rdata = !id_instr_rv[32] ;

  // value method dbus_addr_wdata_fst
  assign dbus_addr_wdata_fst = loadstore_fifo_rv$port1__read[64] ;
  assign RDY_dbus_addr_wdata_fst = loadstore_fifo_rv$port1__read[65] ;

  // value method dbus_addr_wdata_snd_fst
  assign dbus_addr_wdata_snd_fst = loadstore_fifo_rv$port1__read[63:32] ;
  assign RDY_dbus_addr_wdata_snd_fst = loadstore_fifo_rv$port1__read[65] ;

  // value method dbus_addr_wdata_snd_snd
  assign dbus_addr_wdata_snd_snd = loadstore_fifo_rv$port1__read[31:0] ;
  assign RDY_dbus_addr_wdata_snd_snd = loadstore_fifo_rv$port1__read[65] ;

  // action method dbus_next
  assign RDY_dbus_next = loadstore_fifo_rv$port1__read[65] ;

  // action method dbus_rdata
  assign RDY_dbus_rdata = wb_reg_q_0[32] ;

  // action method boot
  assign RDY_boot = if_pc_ff$FULL_N ;

  // submodule id_pc
  FIFO2 #(.width(32'd32), .guarded(32'd1)) id_pc(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(id_pc$D_IN),
						 .ENQ(id_pc$ENQ),
						 .DEQ(id_pc$DEQ),
						 .CLR(id_pc$CLR),
						 .D_OUT(id_pc$D_OUT),
						 .FULL_N(id_pc$FULL_N),
						 .EMPTY_N(id_pc$EMPTY_N));

  // submodule if_pc_ff
  FIFO2 #(.width(32'd32), .guarded(32'd0)) if_pc_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(if_pc_ff$D_IN),
						    .ENQ(if_pc_ff$ENQ),
						    .DEQ(if_pc_ff$DEQ),
						    .CLR(if_pc_ff$CLR),
						    .D_OUT(if_pc_ff$D_OUT),
						    .FULL_N(if_pc_ff$FULL_N),
						    .EMPTY_N(if_pc_ff$EMPTY_N));

  // submodule if_pc_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) if_pc_firstValid(.CLK(CLK),
							   .D_IN(if_pc_firstValid$D_IN),
							   .EN(if_pc_firstValid$EN),
							   .Q_OUT(if_pc_firstValid$Q_OUT));

  // rule RL_id_stage
  assign WILL_FIRE_RL_id_stage =
	     id_instr_rv$port1__read[32] && ex_reg_cntr_r != 2'd2 &&
	     id_pc$EMPTY_N &&
	     if_pc_ff$FULL_N &&
	     !EN_boot ;

  // rule RL_ex_stage
  assign WILL_FIRE_RL_ex_stage =
	     wb_reg_cntr_r != 2'd2 && if_pc_ff$FULL_N &&
	     !loadstore_fifo_rv[65] &&
	     !EN_boot ;

  // rule RL_ex_reg_incCtr
  assign WILL_FIRE_RL_ex_reg_incCtr =
	     ex_reg_x_wire$whas && ex_reg_x_wire$whas &&
	     !ex_reg_dequeueing$whas ;

  // rule RL_ex_reg_decCtr
  assign WILL_FIRE_RL_ex_reg_decCtr =
	     ex_reg_dequeueing$whas && !ex_reg_x_wire$whas ;

  // rule RL_ex_reg_both
  assign WILL_FIRE_RL_ex_reg_both =
	     ex_reg_x_wire$whas && ex_reg_dequeueing$whas &&
	     ex_reg_x_wire$whas ;

  // rule RL_wb_reg_incCtr
  assign WILL_FIRE_RL_wb_reg_incCtr =
	     wb_reg_enqueueing$whas && wb_reg_enqueueing$whas &&
	     !wb_reg_dequeueing$whas ;

  // rule RL_wb_reg_decCtr
  assign WILL_FIRE_RL_wb_reg_decCtr =
	     wb_reg_dequeueing$whas && !wb_reg_enqueueing$whas ;

  // rule RL_wb_reg_both
  assign WILL_FIRE_RL_wb_reg_both =
	     wb_reg_enqueueing$whas && wb_reg_dequeueing$whas &&
	     wb_reg_enqueueing$whas ;

  // inputs to muxes for submodule ports
  assign MUX_ex_reg_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_ex_reg_incCtr && ex_reg_cntr_r == 2'd0 ;
  assign MUX_ex_reg_q_0$write_1__SEL_2 = WILL_FIRE_RL_ex_reg_both && _dfoo3 ;
  assign MUX_ex_reg_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ex_reg_incCtr && ex_reg_cntr_r == 2'd1 ;
  assign MUX_ex_reg_q_1$write_1__SEL_2 = WILL_FIRE_RL_ex_reg_both && _dfoo1 ;
  assign MUX_if_pc_enqw$wset_1__SEL_1 =
	     WILL_FIRE_RL_ex_stage &&
	     (ex_reg_q_0[164:158] == 7'd103 || ex_reg_q_0[164:158] == 7'd99) ;
  assign MUX_if_pc_enqw$wset_1__SEL_2 =
	     WILL_FIRE_RL_id_stage &&
	     NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d325 &&
	     id_instr_rv$port1__read[6:0] != 7'd103 &&
	     id_instr_rv$port1__read[6:0] != 7'd99 ;
  assign MUX_wb_reg_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wb_reg_incCtr && wb_reg_cntr_r == 2'd0 ;
  assign MUX_wb_reg_q_0$write_1__SEL_2 = WILL_FIRE_RL_wb_reg_both && _dfoo7 ;
  assign MUX_wb_reg_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wb_reg_incCtr && wb_reg_cntr_r == 2'd1 ;
  assign MUX_wb_reg_q_1$write_1__SEL_2 = WILL_FIRE_RL_wb_reg_both && _dfoo5 ;
  assign MUX_ex_reg_cntr_r$write_1__VAL_2 = ex_reg_cntr_r + 2'd1 ;
  assign MUX_ex_reg_q_0$write_1__VAL_2 =
	     (ex_reg_cntr_r == 2'd1) ?
	       ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41 :
	       { ex_reg_q_1[196:165],
		 CASE_ex_reg_q_1_BITS_164_TO_158_3_ex_reg_q_1_B_ETC__q4,
		 ex_reg_q_1[157:0] } ;
  assign MUX_ex_reg_q_0$write_1__VAL_3 =
	     { ex_reg_q_1[196:165],
	       CASE_ex_reg_q_1_BITS_164_TO_158_3_ex_reg_q_1_B_ETC__q4,
	       ex_reg_q_1[157:0] } ;
  assign MUX_ex_reg_q_1$write_1__VAL_2 =
	     (ex_reg_cntr_r == 2'd2) ?
	       ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41 :
	       197'd0 ;
  assign MUX_if_pc_enqw$wset_1__VAL_1 =
	     (ex_reg_q_0[164:158] == 7'd103) ?
	       ex_reg_q_0_86_BITS_151_TO_120_41_PLUS_ex_reg_q_ETC___d343 :
	       ex_reg_q_0[196:165] +
	       (IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 ?
		  ex_reg_q_0[31:0] :
		  32'd4) ;
  assign MUX_if_pc_enqw$wset_1__VAL_2 =
	     (id_instr_rv$port1__read[6:0] == 7'd111) ?
	       id_pc$D_OUT +
	       IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 :
	       id_pc$D_OUT + 32'd4 ;
  assign MUX_wb_reg_cntr_r$write_1__VAL_2 = wb_reg_cntr_r + 2'd1 ;
  assign MUX_wb_reg_q_0$write_1__VAL_2 =
	     (wb_reg_cntr_r == 2'd1) ?
	       wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107 :
	       { wb_reg_q_1[196:165],
		 CASE_wb_reg_q_1_BITS_164_TO_158_3_wb_reg_q_1_B_ETC__q5,
		 wb_reg_q_1[157:0] } ;
  assign MUX_wb_reg_q_0$write_1__VAL_3 =
	     { wb_reg_q_1[196:165],
	       CASE_wb_reg_q_1_BITS_164_TO_158_3_wb_reg_q_1_B_ETC__q5,
	       wb_reg_q_1[157:0] } ;
  assign MUX_wb_reg_q_1$write_1__VAL_2 =
	     (wb_reg_cntr_r == 2'd2) ?
	       wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107 :
	       197'd0 ;

  // inlined wires
  always@(MUX_if_pc_enqw$wset_1__SEL_1 or
	  MUX_if_pc_enqw$wset_1__VAL_1 or
	  MUX_if_pc_enqw$wset_1__SEL_2 or
	  MUX_if_pc_enqw$wset_1__VAL_2 or EN_boot or boot_boot_addr)
  case (1'b1)
    MUX_if_pc_enqw$wset_1__SEL_1:
	if_pc_enqw$wget = MUX_if_pc_enqw$wset_1__VAL_1;
    MUX_if_pc_enqw$wset_1__SEL_2:
	if_pc_enqw$wget = MUX_if_pc_enqw$wset_1__VAL_2;
    EN_boot: if_pc_enqw$wget = boot_boot_addr;
    default: if_pc_enqw$wget = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign if_pc_enqw$whas =
	     WILL_FIRE_RL_id_stage &&
	     NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d325 &&
	     id_instr_rv$port1__read[6:0] != 7'd103 &&
	     id_instr_rv$port1__read[6:0] != 7'd99 ||
	     WILL_FIRE_RL_ex_stage &&
	     (ex_reg_q_0[164:158] == 7'd103 ||
	      ex_reg_q_0[164:158] == 7'd99) ||
	     EN_boot ;
  assign ex_reg_x_wire$wget =
	     { id_pc$D_OUT,
	       CASE_id_instr_rvport1__read_BITS_6_TO_0_3_id__ETC__q10,
	       id_instr_rv$port1__read[6:0] == 7'd19 ||
	       id_instr_rv$port1__read[6:0] == 7'd3 ||
	       id_instr_rv$port1__read[6:0] == 7'd103 ||
	       id_instr_rv$port1__read[6:0] == 7'd51 ||
	       id_instr_rv$port1__read[6:0] == 7'd35 ||
	       id_instr_rv$port1__read[6:0] == 7'd99,
	       id_instr_rv_port1__read__42_BITS_19_TO_15_70_C_ETC___d263,
	       id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d268,
	       id_instr_rv$port1__read[11:7] != 5'd0 &&
	       (id_instr_rv$port1__read[6:0] == 7'd3 ||
		id_instr_rv$port1__read[6:0] == 7'd111 ||
		id_instr_rv$port1__read[6:0] == 7'd103 ||
		id_instr_rv$port1__read[6:0] == 7'd55 ||
		id_instr_rv$port1__read[6:0] == 7'd23 ||
		id_instr_rv$port1__read[6:0] == 7'd19 ||
		id_instr_rv$port1__read[6:0] == 7'd51),
	       id_instr_rv$port1__read[11:7],
	       32'd0,
	       id_instr_rv$port1__read[31:25],
	       id_instr_rv$port1__read[14:12],
	       id_instr_rv$port1__read[6:0] == 7'd35,
	       id_instr_rv$port1__read[11:7] != 5'd0 &&
	       id_instr_rv$port1__read[6:0] == 7'd3,
	       IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 } ;
  assign ex_reg_x_wire$whas =
	     WILL_FIRE_RL_id_stage &&
	     NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d198 ;
  assign wb_reg_x_wire$wget =
	     { ex_reg_q_0[196:165],
	       x__h8660,
	       ex_reg_q_0[157:76],
	       IF_IF_ex_reg_q_0_86_BITS_164_TO_158_37_EQ_23_7_ETC___d465,
	       ex_reg_q_0[43:0] } ;
  assign wb_load_data$wget = { 1'd1, dbus_rdata_read_data } ;
  assign _wset_RL_id_stage$EN_if_pc_enqw$wget =
	     NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d325 &&
	     id_instr_rv$port1__read[6:0] != 7'd103 &&
	     id_instr_rv$port1__read[6:0] != 7'd99 ;
  assign ex_reg_dequeueing$whas =
	     WILL_FIRE_RL_ex_stage && ex_reg_cntr_r != 2'd0 ;
  assign wb_reg_enqueueing$whas = WILL_FIRE_RL_ex_stage && ex_reg_q_0[81] ;
  assign wb_reg_dequeueing$whas =
	     wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] &&
	     wb_reg_cntr_r != 2'd0 ||
	     !wb_reg_q_0[32] && wb_reg_q_0[81] && wb_reg_cntr_r != 2'd0 ;
  assign id_instr_rv$port0__write_1 = { 1'd1, ibus_rdata_instr } ;
  assign id_instr_rv$port1__read =
	     EN_ibus_rdata ? id_instr_rv$port0__write_1 : id_instr_rv ;
  assign id_instr_rv$EN_port1__write =
	     WILL_FIRE_RL_id_stage &&
	     NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d198 ;
  assign id_instr_rv$port2__read =
	     id_instr_rv$EN_port1__write ?
	       33'h0AAAAAAAA :
	       id_instr_rv$port1__read ;
  assign loadstore_fifo_rv$EN_port0__write =
	     WILL_FIRE_RL_ex_stage && (ex_reg_q_0[33] || ex_reg_q_0[32]) ;
  assign loadstore_fifo_rv$port0__write_1 =
	     { 1'd1,
	       ex_reg_q_0[33],
	       ex_reg_q_0_86_BITS_151_TO_120_41_PLUS_ex_reg_q_ETC___d343,
	       ex_reg_q_0[113:82] } ;
  assign loadstore_fifo_rv$port1__read =
	     loadstore_fifo_rv$EN_port0__write ?
	       loadstore_fifo_rv$port0__write_1 :
	       loadstore_fifo_rv ;
  assign loadstore_fifo_rv$port2__read =
	     EN_dbus_next ?
	       66'h0AAAAAAAAAAAAAAAA :
	       loadstore_fifo_rv$port1__read ;

  // register ex_reg_cntr_r
  assign ex_reg_cntr_r$D_IN =
	     WILL_FIRE_RL_ex_reg_decCtr ?
	       ex_reg_cntr_r_6_MINUS_1___d68 :
	       MUX_ex_reg_cntr_r$write_1__VAL_2 ;
  assign ex_reg_cntr_r$EN =
	     WILL_FIRE_RL_ex_reg_decCtr || WILL_FIRE_RL_ex_reg_incCtr ;

  // register ex_reg_q_0
  always@(MUX_ex_reg_q_0$write_1__SEL_1 or
	  ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41 or
	  MUX_ex_reg_q_0$write_1__SEL_2 or
	  MUX_ex_reg_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_ex_reg_decCtr or MUX_ex_reg_q_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ex_reg_q_0$write_1__SEL_1:
	  ex_reg_q_0$D_IN =
	      ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41;
      MUX_ex_reg_q_0$write_1__SEL_2:
	  ex_reg_q_0$D_IN = MUX_ex_reg_q_0$write_1__VAL_2;
      WILL_FIRE_RL_ex_reg_decCtr:
	  ex_reg_q_0$D_IN = MUX_ex_reg_q_0$write_1__VAL_3;
      default: ex_reg_q_0$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ex_reg_q_0$EN =
	     WILL_FIRE_RL_ex_reg_incCtr && ex_reg_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_ex_reg_both && _dfoo3 ||
	     WILL_FIRE_RL_ex_reg_decCtr ;

  // register ex_reg_q_1
  always@(MUX_ex_reg_q_1$write_1__SEL_1 or
	  ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41 or
	  MUX_ex_reg_q_1$write_1__SEL_2 or
	  MUX_ex_reg_q_1$write_1__VAL_2 or WILL_FIRE_RL_ex_reg_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ex_reg_q_1$write_1__SEL_1:
	  ex_reg_q_1$D_IN =
	      ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41;
      MUX_ex_reg_q_1$write_1__SEL_2:
	  ex_reg_q_1$D_IN = MUX_ex_reg_q_1$write_1__VAL_2;
      WILL_FIRE_RL_ex_reg_decCtr: ex_reg_q_1$D_IN = 197'd0;
      default: ex_reg_q_1$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ex_reg_q_1$EN =
	     WILL_FIRE_RL_ex_reg_incCtr && ex_reg_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_ex_reg_both && _dfoo1 ||
	     WILL_FIRE_RL_ex_reg_decCtr ;

  // register id_instr_rv
  assign id_instr_rv$D_IN = id_instr_rv$port2__read ;
  assign id_instr_rv$EN = 1'b1 ;

  // register loadstore_fifo_rv
  assign loadstore_fifo_rv$D_IN = loadstore_fifo_rv$port2__read ;
  assign loadstore_fifo_rv$EN = 1'b1 ;

  // register regfile_0
  assign regfile_0$D_IN =
	     (wb_reg_q_0[80:76] == 5'd0 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_0$EN =
	     wb_reg_q_0[80:76] == 5'd0 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_1
  assign regfile_1$D_IN =
	     (wb_reg_q_0[80:76] == 5'd1 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_1$EN =
	     wb_reg_q_0[80:76] == 5'd1 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_10
  assign regfile_10$D_IN =
	     (wb_reg_q_0[80:76] == 5'd10 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_10$EN =
	     wb_reg_q_0[80:76] == 5'd10 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_11
  assign regfile_11$D_IN =
	     (wb_reg_q_0[80:76] == 5'd11 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_11$EN =
	     wb_reg_q_0[80:76] == 5'd11 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_12
  assign regfile_12$D_IN =
	     (wb_reg_q_0[80:76] == 5'd12 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_12$EN =
	     wb_reg_q_0[80:76] == 5'd12 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_13
  assign regfile_13$D_IN =
	     (wb_reg_q_0[80:76] == 5'd13 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_13$EN =
	     wb_reg_q_0[80:76] == 5'd13 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_14
  assign regfile_14$D_IN =
	     (wb_reg_q_0[80:76] == 5'd14 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_14$EN =
	     wb_reg_q_0[80:76] == 5'd14 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_15
  assign regfile_15$D_IN =
	     (wb_reg_q_0[80:76] == 5'd15 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_15$EN =
	     wb_reg_q_0[80:76] == 5'd15 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_16
  assign regfile_16$D_IN =
	     (wb_reg_q_0[80:76] == 5'd16 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_16$EN =
	     wb_reg_q_0[80:76] == 5'd16 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_17
  assign regfile_17$D_IN =
	     (wb_reg_q_0[80:76] == 5'd17 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_17$EN =
	     wb_reg_q_0[80:76] == 5'd17 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_18
  assign regfile_18$D_IN =
	     (wb_reg_q_0[80:76] == 5'd18 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_18$EN =
	     wb_reg_q_0[80:76] == 5'd18 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_19
  assign regfile_19$D_IN =
	     (wb_reg_q_0[80:76] == 5'd19 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_19$EN =
	     wb_reg_q_0[80:76] == 5'd19 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_2
  assign regfile_2$D_IN =
	     (wb_reg_q_0[80:76] == 5'd2 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_2$EN =
	     wb_reg_q_0[80:76] == 5'd2 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_20
  assign regfile_20$D_IN =
	     (wb_reg_q_0[80:76] == 5'd20 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_20$EN =
	     wb_reg_q_0[80:76] == 5'd20 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_21
  assign regfile_21$D_IN =
	     (wb_reg_q_0[80:76] == 5'd21 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_21$EN =
	     wb_reg_q_0[80:76] == 5'd21 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_22
  assign regfile_22$D_IN =
	     (wb_reg_q_0[80:76] == 5'd22 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_22$EN =
	     wb_reg_q_0[80:76] == 5'd22 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_23
  assign regfile_23$D_IN =
	     (wb_reg_q_0[80:76] == 5'd23 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_23$EN =
	     wb_reg_q_0[80:76] == 5'd23 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_24
  assign regfile_24$D_IN =
	     (wb_reg_q_0[80:76] == 5'd24 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_24$EN =
	     wb_reg_q_0[80:76] == 5'd24 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_25
  assign regfile_25$D_IN =
	     (wb_reg_q_0[80:76] == 5'd25 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_25$EN =
	     wb_reg_q_0[80:76] == 5'd25 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_26
  assign regfile_26$D_IN =
	     (wb_reg_q_0[80:76] == 5'd26 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_26$EN =
	     wb_reg_q_0[80:76] == 5'd26 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_27
  assign regfile_27$D_IN =
	     (wb_reg_q_0[80:76] == 5'd27 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_27$EN =
	     wb_reg_q_0[80:76] == 5'd27 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_28
  assign regfile_28$D_IN =
	     (wb_reg_q_0[80:76] == 5'd28 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_28$EN =
	     wb_reg_q_0[80:76] == 5'd28 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_29
  assign regfile_29$D_IN =
	     (wb_reg_q_0[80:76] == 5'd29 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_29$EN =
	     wb_reg_q_0[80:76] == 5'd29 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_3
  assign regfile_3$D_IN =
	     (wb_reg_q_0[80:76] == 5'd3 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_3$EN =
	     wb_reg_q_0[80:76] == 5'd3 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_30
  assign regfile_30$D_IN =
	     (wb_reg_q_0[80:76] == 5'd30 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_30$EN =
	     wb_reg_q_0[80:76] == 5'd30 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_31
  assign regfile_31$D_IN =
	     (wb_reg_q_0[80:76] == 5'd31 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_31$EN =
	     wb_reg_q_0[80:76] == 5'd31 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_4
  assign regfile_4$D_IN =
	     (wb_reg_q_0[80:76] == 5'd4 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_4$EN =
	     wb_reg_q_0[80:76] == 5'd4 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_5
  assign regfile_5$D_IN =
	     (wb_reg_q_0[80:76] == 5'd5 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_5$EN =
	     wb_reg_q_0[80:76] == 5'd5 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_6
  assign regfile_6$D_IN =
	     (wb_reg_q_0[80:76] == 5'd6 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_6$EN =
	     wb_reg_q_0[80:76] == 5'd6 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_7
  assign regfile_7$D_IN =
	     (wb_reg_q_0[80:76] == 5'd7 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_7$EN =
	     wb_reg_q_0[80:76] == 5'd7 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_8
  assign regfile_8$D_IN =
	     (wb_reg_q_0[80:76] == 5'd8 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_8$EN =
	     wb_reg_q_0[80:76] == 5'd8 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register regfile_9
  assign regfile_9$D_IN =
	     (wb_reg_q_0[80:76] == 5'd9 && wb_reg_q_0[32] && EN_dbus_rdata &&
	      wb_load_data$wget[32]) ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign regfile_9$EN =
	     wb_reg_q_0[80:76] == 5'd9 &&
	     (wb_reg_q_0[32] && EN_dbus_rdata && wb_load_data$wget[32] ||
	      !wb_reg_q_0[32] && wb_reg_q_0[81]) ;

  // register wb_reg_cntr_r
  assign wb_reg_cntr_r$D_IN =
	     WILL_FIRE_RL_wb_reg_decCtr ?
	       wb_reg_cntr_r_2_MINUS_1___d134 :
	       MUX_wb_reg_cntr_r$write_1__VAL_2 ;
  assign wb_reg_cntr_r$EN =
	     WILL_FIRE_RL_wb_reg_decCtr || WILL_FIRE_RL_wb_reg_incCtr ;

  // register wb_reg_q_0
  always@(MUX_wb_reg_q_0$write_1__SEL_1 or
	  wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107 or
	  MUX_wb_reg_q_0$write_1__SEL_2 or
	  MUX_wb_reg_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wb_reg_decCtr or MUX_wb_reg_q_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wb_reg_q_0$write_1__SEL_1:
	  wb_reg_q_0$D_IN =
	      wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107;
      MUX_wb_reg_q_0$write_1__SEL_2:
	  wb_reg_q_0$D_IN = MUX_wb_reg_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wb_reg_decCtr:
	  wb_reg_q_0$D_IN = MUX_wb_reg_q_0$write_1__VAL_3;
      default: wb_reg_q_0$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wb_reg_q_0$EN =
	     WILL_FIRE_RL_wb_reg_incCtr && wb_reg_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wb_reg_both && _dfoo7 ||
	     WILL_FIRE_RL_wb_reg_decCtr ;

  // register wb_reg_q_1
  always@(MUX_wb_reg_q_1$write_1__SEL_1 or
	  wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107 or
	  MUX_wb_reg_q_1$write_1__SEL_2 or
	  MUX_wb_reg_q_1$write_1__VAL_2 or WILL_FIRE_RL_wb_reg_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wb_reg_q_1$write_1__SEL_1:
	  wb_reg_q_1$D_IN =
	      wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107;
      MUX_wb_reg_q_1$write_1__SEL_2:
	  wb_reg_q_1$D_IN = MUX_wb_reg_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wb_reg_decCtr: wb_reg_q_1$D_IN = 197'd0;
      default: wb_reg_q_1$D_IN =
		   197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wb_reg_q_1$EN =
	     WILL_FIRE_RL_wb_reg_incCtr && wb_reg_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wb_reg_both && _dfoo5 ||
	     WILL_FIRE_RL_wb_reg_decCtr ;

  // submodule id_pc
  assign id_pc$D_IN = if_pc_ff$EMPTY_N ? if_pc_ff$D_OUT : if_pc_enqw$wget ;
  assign id_pc$ENQ = EN_ibus_next ;
  assign id_pc$DEQ = ex_reg_x_wire$whas ;
  assign id_pc$CLR = 1'b0 ;

  // submodule if_pc_ff
  assign if_pc_ff$D_IN = if_pc_enqw$wget ;
  assign if_pc_ff$ENQ =
	     if_pc_enqw$whas && (!EN_ibus_next || if_pc_ff$EMPTY_N) ;
  assign if_pc_ff$DEQ = EN_ibus_next && if_pc_ff$EMPTY_N ;
  assign if_pc_ff$CLR = 1'b0 ;

  // submodule if_pc_firstValid
  assign if_pc_firstValid$D_IN = 1'd1 ;
  assign if_pc_firstValid$EN = EN_ibus_next ;

  // remaining internal signals
  assign IF_IF_ex_reg_q_0_86_BITS_164_TO_158_37_EQ_23_7_ETC___d465 =
	     (x__h8660[6:4] == 3'b110 && x__h8660[2:0] == 3'b111) ?
	       ex_reg_q_0[196:165] + 32'd4 :
	       CASE_x660_0b10111_ex_reg_q_0_BITS_196_TO_165_P_ETC__q3 ;
  assign IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 =
	     (!EN_dbus_rdata || !wb_load_data$wget[32]) ?
	       32'd0 :
	       wb_load_data$wget[31:0] ;
  assign IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d446 =
	     ({ ex_reg_q_0[36:34], x__h8660 } == 10'b0100010011) ?
	       (((ex_reg_q_0[151:120] ^ 32'h80000000) <
		 (ex_reg_q_0[31:0] ^ 32'h80000000)) ?
		  32'd1 :
		  32'd0) :
	       IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d445 ;
  assign IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d456 =
	     ({ ex_reg_q_0[36:34], x__h8660 } == 10'b1100010011) ?
	       ex_reg_q_0[151:120] | ex_reg_q_0[31:0] :
	       (({ ex_reg_q_0[43:34], x__h8660 } == 17'b00000001110110011) ?
		  ex_reg_q_0[151:120] & ex_reg_q_0[113:82] :
		  (({ ex_reg_q_0[36:34], x__h8660 } == 10'b1110010011) ?
		     ex_reg_q_0[151:120] & ex_reg_q_0[31:0] :
		     IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453)) ;
  assign IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d458 =
	     ({ ex_reg_q_0[36:34], x__h8660 } == 10'b1000010011) ?
	       ex_reg_q_0[151:120] ^ ex_reg_q_0[31:0] :
	       (({ ex_reg_q_0[43:34], x__h8660 } == 17'b00000001100110011) ?
		  ex_reg_q_0[151:120] | ex_reg_q_0[113:82] :
		  IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d456) ;
  assign IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d461 =
	     ({ ex_reg_q_0[36:34], x__h8660 } == 10'b0000010011) ?
	       ex_reg_q_0_86_BITS_151_TO_120_41_PLUS_ex_reg_q_ETC___d343 :
	       CASE_ex_reg_q_0_BITS_43_TO_34_CONCAT_x660_0b10_ETC__q2 ;
  assign IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d445 =
	     ({ ex_reg_q_0[43:34], x__h8660 } == 17'b00000000110110011) ?
	       (ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356 ?
		  32'd1 :
		  32'd0) :
	       (({ ex_reg_q_0[36:34], x__h8660 } == 10'b0110010011) ?
		  ((ex_reg_q_0[151:120] < ex_reg_q_0[31:0]) ? 32'd1 : 32'd0) :
		  32'd0) ;
  assign IF_wb_reg_q_0_49_BIT_32_50_THEN_IF_NOT_wb_load_ETC___d227 =
	     wb_reg_q_0[32] ?
	       IF_NOT_wb_load_data_whas__81_21_OR_NOT_wb_load_ETC___d225 :
	       wb_reg_q_0[75:44] ;
  assign NOT_id_instr_rv_port1__read__42_BITS_19_TO_15__ETC___d191 =
	     id_instr_rv$port1__read[19:15] != ex_reg_q_0[80:76] ;
  assign NOT_id_instr_rv_port1__read__42_BITS_24_TO_20__ETC___d194 =
	     id_instr_rv$port1__read[24:20] != ex_reg_q_0[80:76] ;
  assign NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d179 =
	     (id_instr_rv$port1__read[6:0] != 7'd19 &&
	      id_instr_rv$port1__read[6:0] != 7'd3 &&
	      id_instr_rv$port1__read[6:0] != 7'd103 &&
	      id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 &&
	      id_instr_rv$port1__read[6:0] != 7'd99 ||
	      !id_instr_rv_port1__read__42_BITS_19_TO_15_70_E_ETC___d172) &&
	     (id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 &&
	      id_instr_rv$port1__read[6:0] != 7'd99 ||
	      !id_instr_rv_port1__read__42_BITS_24_TO_20_75_E_ETC___d176) ;
  assign NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d196 =
	     (id_instr_rv$port1__read[6:0] != 7'd19 &&
	      id_instr_rv$port1__read[6:0] != 7'd3 &&
	      id_instr_rv$port1__read[6:0] != 7'd103 &&
	      id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 &&
	      id_instr_rv$port1__read[6:0] != 7'd99 ||
	      NOT_id_instr_rv_port1__read__42_BITS_19_TO_15__ETC___d191) &&
	     (id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 &&
	      id_instr_rv$port1__read[6:0] != 7'd99 ||
	      NOT_id_instr_rv_port1__read__42_BITS_24_TO_20__ETC___d194) ;
  assign NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d318 =
	     (id_instr_rv$port1__read[6:0] != 7'd19 &&
	      id_instr_rv$port1__read[6:0] != 7'd3 &&
	      id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 ||
	      !id_instr_rv_port1__read__42_BITS_19_TO_15_70_E_ETC___d172) &&
	     (id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 ||
	      !id_instr_rv_port1__read__42_BITS_24_TO_20_75_E_ETC___d176) ;
  assign NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d323 =
	     (id_instr_rv$port1__read[6:0] != 7'd19 &&
	      id_instr_rv$port1__read[6:0] != 7'd3 &&
	      id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 ||
	      NOT_id_instr_rv_port1__read__42_BITS_19_TO_15__ETC___d191) &&
	     (id_instr_rv$port1__read[6:0] != 7'd51 &&
	      id_instr_rv$port1__read[6:0] != 7'd35 ||
	      NOT_id_instr_rv_port1__read__42_BITS_24_TO_20__ETC___d194) ;
  assign NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d198 =
	     (!wb_reg_q_0[32] ||
	      NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d179 ||
	      EN_dbus_rdata && wb_load_data$wget[32]) &&
	     (!ex_reg_q_0[81] ||
	      NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d196) ;
  assign NOT_wb_reg_q_0_49_BIT_32_50_51_OR_NOT_id_instr_ETC___d325 =
	     (!wb_reg_q_0[32] ||
	      NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d318 ||
	      EN_dbus_rdata && wb_load_data$wget[32]) &&
	     (!ex_reg_q_0[81] ||
	      NOT_id_instr_rv_port1__read__42_BITS_6_TO_0_52_ETC___d323) ;
  assign SEXT_id_instr_rv_port1__read__42_BITS_31_TO_20_89___d290 =
	     { {20{id_instr_rvport1__read_BITS_31_TO_20__q6[11]}},
	       id_instr_rvport1__read_BITS_31_TO_20__q6 } ;
  assign _dfoo1 =
	     ex_reg_cntr_r != 2'd2 || ex_reg_cntr_r_6_MINUS_1___d68 == 2'd1 ;
  assign _dfoo3 =
	     ex_reg_cntr_r != 2'd1 || ex_reg_cntr_r_6_MINUS_1___d68 == 2'd0 ;
  assign _dfoo5 =
	     wb_reg_cntr_r != 2'd2 || wb_reg_cntr_r_2_MINUS_1___d134 == 2'd1 ;
  assign _dfoo7 =
	     wb_reg_cntr_r != 2'd1 || wb_reg_cntr_r_2_MINUS_1___d134 == 2'd0 ;
  assign b__h7329 = { id_instr_rv$port1__read[31:12], 12'h0 } ;
  assign b__h7532 =
	     { id_instr_rv$port1__read[31:25],
	       id_instr_rv$port1__read[11:7] } ;
  assign b__h8901 =
	     ex_reg_q_0[151:120] >> ex_reg_q_0[86:82] |
	     ~(32'hFFFFFFFF >> ex_reg_q_0[86:82]) &
	     {32{ex_reg_q_0_BITS_151_TO_120__q1[31]}} ;
  assign b__h8907 =
	     ex_reg_q_0[151:120] >> ex_reg_q_0[4:0] |
	     ~(32'hFFFFFFFF >> ex_reg_q_0[4:0]) &
	     {32{ex_reg_q_0_BITS_151_TO_120__q1[31]}} ;
  assign ex_reg_cntr_r_6_MINUS_1___d68 = ex_reg_cntr_r - 2'd1 ;
  assign ex_reg_q_0_86_BITS_151_TO_120_41_EQ_ex_reg_q_0_ETC___d348 =
	     ex_reg_q_0[151:120] == ex_reg_q_0[113:82] ;
  assign ex_reg_q_0_86_BITS_151_TO_120_41_PLUS_ex_reg_q_ETC___d343 =
	     ex_reg_q_0[151:120] + ex_reg_q_0[31:0] ;
  assign ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352 =
	     (ex_reg_q_0[151:120] ^ 32'h80000000) <
	     (ex_reg_q_0[113:82] ^ 32'h80000000) ;
  assign ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356 =
	     ex_reg_q_0[151:120] < ex_reg_q_0[113:82] ;
  assign ex_reg_q_0_BITS_151_TO_120__q1 = ex_reg_q_0[151:120] ;
  assign ex_reg_x_wire_wget__9_BITS_196_TO_165_0_CONCAT_ETC___d41 =
	     { ex_reg_x_wire$wget[196:165],
	       CASE_ex_reg_x_wirewget_BITS_164_TO_158_3_ex_r_ETC__q11,
	       ex_reg_x_wire$wget[157:0] } ;
  assign id_instr_rv_port1__read__42_BITS_19_TO_15_70_C_ETC___d263 =
	     { id_instr_rv$port1__read[19:15],
	       id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d220 ?
		 IF_wb_reg_q_0_49_BIT_32_50_THEN_IF_NOT_wb_load_ETC___d227 :
		 SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 } ;
  assign id_instr_rv_port1__read__42_BITS_19_TO_15_70_E_ETC___d172 =
	     id_instr_rv$port1__read[19:15] == wb_reg_q_0[80:76] ;
  assign id_instr_rv_port1__read__42_BITS_24_TO_20_75_E_ETC___d176 =
	     id_instr_rv$port1__read[24:20] == wb_reg_q_0[80:76] ;
  assign id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d220 =
	     (id_instr_rv$port1__read[6:0] == 7'd19 ||
	      id_instr_rv$port1__read[6:0] == 7'd3 ||
	      id_instr_rv$port1__read[6:0] == 7'd103 ||
	      id_instr_rv$port1__read[6:0] == 7'd51 ||
	      id_instr_rv$port1__read[6:0] == 7'd35 ||
	      id_instr_rv$port1__read[6:0] == 7'd99) &&
	     wb_reg_q_0[81] &&
	     id_instr_rv_port1__read__42_BITS_19_TO_15_70_E_ETC___d172 ;
  assign id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d265 =
	     (id_instr_rv$port1__read[6:0] == 7'd51 ||
	      id_instr_rv$port1__read[6:0] == 7'd35 ||
	      id_instr_rv$port1__read[6:0] == 7'd99) &&
	     wb_reg_q_0[81] &&
	     id_instr_rv_port1__read__42_BITS_24_TO_20_75_E_ETC___d176 ;
  assign id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d268 =
	     { id_instr_rv$port1__read[6:0] == 7'd51 ||
	       id_instr_rv$port1__read[6:0] == 7'd35 ||
	       id_instr_rv$port1__read[6:0] == 7'd99,
	       id_instr_rv$port1__read[24:20],
	       id_instr_rv_port1__read__42_BITS_6_TO_0_52_EQ__ETC___d265 ?
		 IF_wb_reg_q_0_49_BIT_32_50_THEN_IF_NOT_wb_load_ETC___d227 :
		 SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 } ;
  assign id_instr_rvport1__read_BITS_31_TO_20__q6 =
	     id_instr_rv$port1__read[31:20] ;
  assign id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q7 =
	     { id_instr_rv$port1__read[31],
	       id_instr_rv$port1__read[7],
	       id_instr_rv$port1__read[30:25],
	       id_instr_rv$port1__read[11:8],
	       1'b0 } ;
  assign id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q8 =
	     { id_instr_rv$port1__read[31],
	       id_instr_rv$port1__read[19:12],
	       id_instr_rv$port1__read[20],
	       id_instr_rv$port1__read[30:21],
	       1'b0 } ;
  assign wb_reg_cntr_r_2_MINUS_1___d134 = wb_reg_cntr_r - 2'd1 ;
  assign wb_reg_x_wire_wget__5_BITS_196_TO_165_6_CONCAT_ETC___d107 =
	     { wb_reg_x_wire$wget[196:165],
	       CASE_wb_reg_x_wirewget_BITS_164_TO_158_3_wb_r_ETC__q9,
	       wb_reg_x_wire$wget[157:0] } ;
  always@(ex_reg_q_0)
  begin
    case (ex_reg_q_0[164:158])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  x__h8660 = ex_reg_q_0[164:158];
      default: x__h8660 = 7'd0;
    endcase
  end
  always@(ex_reg_q_0 or
	  ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356 or
	  ex_reg_q_0_86_BITS_151_TO_120_41_EQ_ex_reg_q_0_ETC___d348 or
	  ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352)
  begin
    case (ex_reg_q_0[36:34])
      3'b0:
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
	      ex_reg_q_0_86_BITS_151_TO_120_41_EQ_ex_reg_q_0_ETC___d348;
      3'b001:
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
	      !ex_reg_q_0_86_BITS_151_TO_120_41_EQ_ex_reg_q_0_ETC___d348;
      3'b100:
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
	      ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352;
      3'b101:
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
	      !ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352;
      3'b110:
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
	      ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356;
      default: IF_ex_reg_q_0_86_BITS_36_TO_34_45_EQ_0b0_46_TH_ETC___d364 =
		   ex_reg_q_0[36:34] == 3'b111 &&
		   !ex_reg_q_0_86_BITS_151_TO_120_41_ULT_ex_reg_q__ETC___d356;
    endcase
  end
  always@(ex_reg_q_0 or
	  x__h8660 or
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d446 or
	  ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352 or
	  b__h8907 or b__h8901)
  begin
    case ({ ex_reg_q_0[43:34], x__h8660 })
      17'b00000000010010011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      ex_reg_q_0[151:120] << ex_reg_q_0[4:0];
      17'b00000000010110011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      ex_reg_q_0[151:120] << ex_reg_q_0[86:82];
      17'b00000000100110011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      ex_reg_q_0_86_BITS_151_TO_120_41_SLT_ex_reg_q__ETC___d352 ?
		32'd1 :
		32'd0;
      17'b00000001010010011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      ex_reg_q_0[151:120] >> ex_reg_q_0[4:0];
      17'b00000001010110011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      ex_reg_q_0[151:120] >> ex_reg_q_0[86:82];
      17'b01000001010010011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      b__h8907;
      17'b01000001010110011:
	  IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
	      b__h8901;
      default: IF_ex_reg_q_0_86_BITS_43_TO_34_00_CONCAT_IF_ex_ETC___d453 =
		   IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d446;
    endcase
  end
  always@(ex_reg_q_0 or
	  x__h8660 or
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d458)
  begin
    case ({ ex_reg_q_0[43:34], x__h8660 })
      17'b00000001000110011:
	  CASE_ex_reg_q_0_BITS_43_TO_34_CONCAT_x660_0b10_ETC__q2 =
	      ex_reg_q_0[151:120] ^ ex_reg_q_0[113:82];
      17'b01000000000110011:
	  CASE_ex_reg_q_0_BITS_43_TO_34_CONCAT_x660_0b10_ETC__q2 =
	      ex_reg_q_0[151:120] - ex_reg_q_0[113:82];
      default: CASE_ex_reg_q_0_BITS_43_TO_34_CONCAT_x660_0b10_ETC__q2 =
		   IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d458;
    endcase
  end
  always@(x__h8660 or
	  ex_reg_q_0 or
	  IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d461)
  begin
    case (x__h8660)
      7'b0010111:
	  CASE_x660_0b10111_ex_reg_q_0_BITS_196_TO_165_P_ETC__q3 =
	      ex_reg_q_0[196:165] + ex_reg_q_0[31:0];
      7'b0110111:
	  CASE_x660_0b10111_ex_reg_q_0_BITS_196_TO_165_P_ETC__q3 =
	      ex_reg_q_0[31:0];
      default: CASE_x660_0b10111_ex_reg_q_0_BITS_196_TO_165_P_ETC__q3 =
		   ({ ex_reg_q_0[43:34], x__h8660 } ==
		    17'b00000000000110011) ?
		     ex_reg_q_0[151:120] + ex_reg_q_0[113:82] :
		     IF_ex_reg_q_0_86_BITS_36_TO_34_45_CONCAT_IF_ex_ETC___d461;
    endcase
  end
  always@(ex_reg_q_1)
  begin
    case (ex_reg_q_1[164:158])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  CASE_ex_reg_q_1_BITS_164_TO_158_3_ex_reg_q_1_B_ETC__q4 =
	      ex_reg_q_1[164:158];
      default: CASE_ex_reg_q_1_BITS_164_TO_158_3_ex_reg_q_1_B_ETC__q4 = 7'd0;
    endcase
  end
  always@(wb_reg_q_1)
  begin
    case (wb_reg_q_1[164:158])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  CASE_wb_reg_q_1_BITS_164_TO_158_3_wb_reg_q_1_B_ETC__q5 =
	      wb_reg_q_1[164:158];
      default: CASE_wb_reg_q_1_BITS_164_TO_158_3_wb_reg_q_1_B_ETC__q5 = 7'd0;
    endcase
  end
  always@(id_instr_rv$port1__read or
	  SEXT_id_instr_rv_port1__read__42_BITS_31_TO_20_89___d290 or
	  b__h7329 or
	  b__h7532 or
	  id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q7 or
	  id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q8)
  begin
    case (id_instr_rv$port1__read[6:0])
      7'd3, 7'd19, 7'd103:
	  IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
	      SEXT_id_instr_rv_port1__read__42_BITS_31_TO_20_89___d290;
      7'd23, 7'd55:
	  IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
	      b__h7329;
      7'd35:
	  IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
	      { {20{b__h7532[11]}}, b__h7532 };
      7'd99:
	  IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
	      { {19{id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q7[12]}},
		id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q7 };
      7'd111:
	  IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
	      { {11{id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q8[20]}},
		id_instr_rvport1__read_BIT_31_CONCAT_id_instr_ETC__q8 };
      default: IF_id_instr_rv_port1__read__42_BITS_6_TO_0_52__ETC___d310 =
		   32'd0;
    endcase
  end
  always@(id_instr_rv$port1__read or
	  regfile_0 or
	  regfile_1 or
	  regfile_2 or
	  regfile_3 or
	  regfile_4 or
	  regfile_5 or
	  regfile_6 or
	  regfile_7 or
	  regfile_8 or
	  regfile_9 or
	  regfile_10 or
	  regfile_11 or
	  regfile_12 or
	  regfile_13 or
	  regfile_14 or
	  regfile_15 or
	  regfile_16 or
	  regfile_17 or
	  regfile_18 or
	  regfile_19 or
	  regfile_20 or
	  regfile_21 or
	  regfile_22 or
	  regfile_23 or
	  regfile_24 or
	  regfile_25 or
	  regfile_26 or
	  regfile_27 or regfile_28 or regfile_29 or regfile_30 or regfile_31)
  begin
    case (id_instr_rv$port1__read[19:15])
      5'd0:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_0;
      5'd1:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_1;
      5'd2:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_2;
      5'd3:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_3;
      5'd4:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_4;
      5'd5:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_5;
      5'd6:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_6;
      5'd7:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_7;
      5'd8:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_8;
      5'd9:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_9;
      5'd10:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_10;
      5'd11:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_11;
      5'd12:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_12;
      5'd13:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_13;
      5'd14:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_14;
      5'd15:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_15;
      5'd16:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_16;
      5'd17:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_17;
      5'd18:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_18;
      5'd19:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_19;
      5'd20:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_20;
      5'd21:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_21;
      5'd22:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_22;
      5'd23:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_23;
      5'd24:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_24;
      5'd25:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_25;
      5'd26:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_26;
      5'd27:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_27;
      5'd28:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_28;
      5'd29:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_29;
      5'd30:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_30;
      5'd31:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d261 =
	      regfile_31;
    endcase
  end
  always@(id_instr_rv$port1__read or
	  regfile_0 or
	  regfile_1 or
	  regfile_2 or
	  regfile_3 or
	  regfile_4 or
	  regfile_5 or
	  regfile_6 or
	  regfile_7 or
	  regfile_8 or
	  regfile_9 or
	  regfile_10 or
	  regfile_11 or
	  regfile_12 or
	  regfile_13 or
	  regfile_14 or
	  regfile_15 or
	  regfile_16 or
	  regfile_17 or
	  regfile_18 or
	  regfile_19 or
	  regfile_20 or
	  regfile_21 or
	  regfile_22 or
	  regfile_23 or
	  regfile_24 or
	  regfile_25 or
	  regfile_26 or
	  regfile_27 or regfile_28 or regfile_29 or regfile_30 or regfile_31)
  begin
    case (id_instr_rv$port1__read[24:20])
      5'd0:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_0;
      5'd1:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_1;
      5'd2:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_2;
      5'd3:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_3;
      5'd4:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_4;
      5'd5:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_5;
      5'd6:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_6;
      5'd7:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_7;
      5'd8:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_8;
      5'd9:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_9;
      5'd10:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_10;
      5'd11:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_11;
      5'd12:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_12;
      5'd13:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_13;
      5'd14:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_14;
      5'd15:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_15;
      5'd16:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_16;
      5'd17:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_17;
      5'd18:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_18;
      5'd19:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_19;
      5'd20:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_20;
      5'd21:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_21;
      5'd22:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_22;
      5'd23:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_23;
      5'd24:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_24;
      5'd25:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_25;
      5'd26:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_26;
      5'd27:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_27;
      5'd28:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_28;
      5'd29:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_29;
      5'd30:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_30;
      5'd31:
	  SEL_ARR_regfile_0_28_regfile_1_29_regfile_2_30_ETC___d266 =
	      regfile_31;
    endcase
  end
  always@(wb_reg_x_wire$wget)
  begin
    case (wb_reg_x_wire$wget[164:158])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  CASE_wb_reg_x_wirewget_BITS_164_TO_158_3_wb_r_ETC__q9 =
	      wb_reg_x_wire$wget[164:158];
      default: CASE_wb_reg_x_wirewget_BITS_164_TO_158_3_wb_r_ETC__q9 = 7'd0;
    endcase
  end
  always@(id_instr_rv$port1__read)
  begin
    case (id_instr_rv$port1__read[6:0])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  CASE_id_instr_rvport1__read_BITS_6_TO_0_3_id__ETC__q10 =
	      id_instr_rv$port1__read[6:0];
      default: CASE_id_instr_rvport1__read_BITS_6_TO_0_3_id__ETC__q10 = 7'd0;
    endcase
  end
  always@(ex_reg_x_wire$wget)
  begin
    case (ex_reg_x_wire$wget[164:158])
      7'd3, 7'd19, 7'd23, 7'd35, 7'd51, 7'd55, 7'd99, 7'd103, 7'd111:
	  CASE_ex_reg_x_wirewget_BITS_164_TO_158_3_ex_r_ETC__q11 =
	      ex_reg_x_wire$wget[164:158];
      default: CASE_ex_reg_x_wirewget_BITS_164_TO_158_3_ex_r_ETC__q11 = 7'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ex_reg_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ex_reg_q_0 <= `BSV_ASSIGNMENT_DELAY 197'd0;
	ex_reg_q_1 <= `BSV_ASSIGNMENT_DELAY 197'd0;
	id_instr_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	loadstore_fifo_rv <= `BSV_ASSIGNMENT_DELAY 66'h0AAAAAAAAAAAAAAAA;
	regfile_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_25 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_26 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_27 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_28 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_29 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_30 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_31 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wb_reg_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wb_reg_q_0 <= `BSV_ASSIGNMENT_DELAY 197'd0;
	wb_reg_q_1 <= `BSV_ASSIGNMENT_DELAY 197'd0;
      end
    else
      begin
        if (ex_reg_cntr_r$EN)
	  ex_reg_cntr_r <= `BSV_ASSIGNMENT_DELAY ex_reg_cntr_r$D_IN;
	if (ex_reg_q_0$EN)
	  ex_reg_q_0 <= `BSV_ASSIGNMENT_DELAY ex_reg_q_0$D_IN;
	if (ex_reg_q_1$EN)
	  ex_reg_q_1 <= `BSV_ASSIGNMENT_DELAY ex_reg_q_1$D_IN;
	if (id_instr_rv$EN)
	  id_instr_rv <= `BSV_ASSIGNMENT_DELAY id_instr_rv$D_IN;
	if (loadstore_fifo_rv$EN)
	  loadstore_fifo_rv <= `BSV_ASSIGNMENT_DELAY loadstore_fifo_rv$D_IN;
	if (regfile_0$EN) regfile_0 <= `BSV_ASSIGNMENT_DELAY regfile_0$D_IN;
	if (regfile_1$EN) regfile_1 <= `BSV_ASSIGNMENT_DELAY regfile_1$D_IN;
	if (regfile_10$EN)
	  regfile_10 <= `BSV_ASSIGNMENT_DELAY regfile_10$D_IN;
	if (regfile_11$EN)
	  regfile_11 <= `BSV_ASSIGNMENT_DELAY regfile_11$D_IN;
	if (regfile_12$EN)
	  regfile_12 <= `BSV_ASSIGNMENT_DELAY regfile_12$D_IN;
	if (regfile_13$EN)
	  regfile_13 <= `BSV_ASSIGNMENT_DELAY regfile_13$D_IN;
	if (regfile_14$EN)
	  regfile_14 <= `BSV_ASSIGNMENT_DELAY regfile_14$D_IN;
	if (regfile_15$EN)
	  regfile_15 <= `BSV_ASSIGNMENT_DELAY regfile_15$D_IN;
	if (regfile_16$EN)
	  regfile_16 <= `BSV_ASSIGNMENT_DELAY regfile_16$D_IN;
	if (regfile_17$EN)
	  regfile_17 <= `BSV_ASSIGNMENT_DELAY regfile_17$D_IN;
	if (regfile_18$EN)
	  regfile_18 <= `BSV_ASSIGNMENT_DELAY regfile_18$D_IN;
	if (regfile_19$EN)
	  regfile_19 <= `BSV_ASSIGNMENT_DELAY regfile_19$D_IN;
	if (regfile_2$EN) regfile_2 <= `BSV_ASSIGNMENT_DELAY regfile_2$D_IN;
	if (regfile_20$EN)
	  regfile_20 <= `BSV_ASSIGNMENT_DELAY regfile_20$D_IN;
	if (regfile_21$EN)
	  regfile_21 <= `BSV_ASSIGNMENT_DELAY regfile_21$D_IN;
	if (regfile_22$EN)
	  regfile_22 <= `BSV_ASSIGNMENT_DELAY regfile_22$D_IN;
	if (regfile_23$EN)
	  regfile_23 <= `BSV_ASSIGNMENT_DELAY regfile_23$D_IN;
	if (regfile_24$EN)
	  regfile_24 <= `BSV_ASSIGNMENT_DELAY regfile_24$D_IN;
	if (regfile_25$EN)
	  regfile_25 <= `BSV_ASSIGNMENT_DELAY regfile_25$D_IN;
	if (regfile_26$EN)
	  regfile_26 <= `BSV_ASSIGNMENT_DELAY regfile_26$D_IN;
	if (regfile_27$EN)
	  regfile_27 <= `BSV_ASSIGNMENT_DELAY regfile_27$D_IN;
	if (regfile_28$EN)
	  regfile_28 <= `BSV_ASSIGNMENT_DELAY regfile_28$D_IN;
	if (regfile_29$EN)
	  regfile_29 <= `BSV_ASSIGNMENT_DELAY regfile_29$D_IN;
	if (regfile_3$EN) regfile_3 <= `BSV_ASSIGNMENT_DELAY regfile_3$D_IN;
	if (regfile_30$EN)
	  regfile_30 <= `BSV_ASSIGNMENT_DELAY regfile_30$D_IN;
	if (regfile_31$EN)
	  regfile_31 <= `BSV_ASSIGNMENT_DELAY regfile_31$D_IN;
	if (regfile_4$EN) regfile_4 <= `BSV_ASSIGNMENT_DELAY regfile_4$D_IN;
	if (regfile_5$EN) regfile_5 <= `BSV_ASSIGNMENT_DELAY regfile_5$D_IN;
	if (regfile_6$EN) regfile_6 <= `BSV_ASSIGNMENT_DELAY regfile_6$D_IN;
	if (regfile_7$EN) regfile_7 <= `BSV_ASSIGNMENT_DELAY regfile_7$D_IN;
	if (regfile_8$EN) regfile_8 <= `BSV_ASSIGNMENT_DELAY regfile_8$D_IN;
	if (regfile_9$EN) regfile_9 <= `BSV_ASSIGNMENT_DELAY regfile_9$D_IN;
	if (wb_reg_cntr_r$EN)
	  wb_reg_cntr_r <= `BSV_ASSIGNMENT_DELAY wb_reg_cntr_r$D_IN;
	if (wb_reg_q_0$EN)
	  wb_reg_q_0 <= `BSV_ASSIGNMENT_DELAY wb_reg_q_0$D_IN;
	if (wb_reg_q_1$EN)
	  wb_reg_q_1 <= `BSV_ASSIGNMENT_DELAY wb_reg_q_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ex_reg_cntr_r = 2'h2;
    ex_reg_q_0 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ex_reg_q_1 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    id_instr_rv = 33'h0AAAAAAAA;
    loadstore_fifo_rv = 66'h2AAAAAAAAAAAAAAAA;
    regfile_0 = 32'hAAAAAAAA;
    regfile_1 = 32'hAAAAAAAA;
    regfile_10 = 32'hAAAAAAAA;
    regfile_11 = 32'hAAAAAAAA;
    regfile_12 = 32'hAAAAAAAA;
    regfile_13 = 32'hAAAAAAAA;
    regfile_14 = 32'hAAAAAAAA;
    regfile_15 = 32'hAAAAAAAA;
    regfile_16 = 32'hAAAAAAAA;
    regfile_17 = 32'hAAAAAAAA;
    regfile_18 = 32'hAAAAAAAA;
    regfile_19 = 32'hAAAAAAAA;
    regfile_2 = 32'hAAAAAAAA;
    regfile_20 = 32'hAAAAAAAA;
    regfile_21 = 32'hAAAAAAAA;
    regfile_22 = 32'hAAAAAAAA;
    regfile_23 = 32'hAAAAAAAA;
    regfile_24 = 32'hAAAAAAAA;
    regfile_25 = 32'hAAAAAAAA;
    regfile_26 = 32'hAAAAAAAA;
    regfile_27 = 32'hAAAAAAAA;
    regfile_28 = 32'hAAAAAAAA;
    regfile_29 = 32'hAAAAAAAA;
    regfile_3 = 32'hAAAAAAAA;
    regfile_30 = 32'hAAAAAAAA;
    regfile_31 = 32'hAAAAAAAA;
    regfile_4 = 32'hAAAAAAAA;
    regfile_5 = 32'hAAAAAAAA;
    regfile_6 = 32'hAAAAAAAA;
    regfile_7 = 32'hAAAAAAAA;
    regfile_8 = 32'hAAAAAAAA;
    regfile_9 = 32'hAAAAAAAA;
    wb_reg_cntr_r = 2'h2;
    wb_reg_q_0 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wb_reg_q_1 = 197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ex_stage && WILL_FIRE_RL_id_stage &&
	  (ex_reg_q_0[164:158] == 7'd103 || ex_reg_q_0[164:158] == 7'd99) &&
	  _wset_RL_id_stage$EN_if_pc_enqw$wget)
	$display("Error: \"Rv32iCPU.bsv\", line 196, column 9: (R0002)\n  Conflict-free rules RL_ex_stage and RL_id_stage called conflicting methods\n  wset and wset of module instance if_pc_enqw.\n");
  end
  // synopsys translate_on
endmodule  // mkRv32iCPU

