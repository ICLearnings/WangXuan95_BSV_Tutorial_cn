//
// Generated by Bluespec Compiler (build 14ff62d)
//
// On Sun Feb 20 16:05:51 DST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [31 : 0] data_ram_serverAdapterA_outData_outData$wget,
		data_ram_serverAdapterB_outData_outData$wget,
		instr_ram_serverAdapter_outData_outData$wget;
  wire [1 : 0] data_ram_serverAdapterA_s1_1$wget,
	       data_ram_serverAdapterA_writeWithResp$wget;
  wire data_ram_serverAdapterA_cnt_1$whas,
       data_ram_serverAdapterA_outData_deqCalled$whas,
       data_ram_serverAdapterA_outData_enqData$whas,
       data_ram_serverAdapterA_outData_outData$whas,
       data_ram_serverAdapterA_writeWithResp$whas,
       data_ram_serverAdapterB_outData_deqCalled$whas,
       data_ram_serverAdapterB_outData_enqData$whas,
       data_ram_serverAdapterB_outData_outData$whas,
       instr_ram_serverAdapter_outData_deqCalled$whas,
       instr_ram_serverAdapter_outData_enqData$whas,
       instr_ram_serverAdapter_outData_outData$whas;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // register cycle
  reg [31 : 0] cycle;
  wire [31 : 0] cycle$D_IN;
  wire cycle$EN;

  // register data_ram_serverAdapterA_cnt
  reg [2 : 0] data_ram_serverAdapterA_cnt;
  wire [2 : 0] data_ram_serverAdapterA_cnt$D_IN;
  wire data_ram_serverAdapterA_cnt$EN;

  // register data_ram_serverAdapterA_s1
  reg [1 : 0] data_ram_serverAdapterA_s1;
  wire [1 : 0] data_ram_serverAdapterA_s1$D_IN;
  wire data_ram_serverAdapterA_s1$EN;

  // register data_ram_serverAdapterB_cnt
  reg [2 : 0] data_ram_serverAdapterB_cnt;
  wire [2 : 0] data_ram_serverAdapterB_cnt$D_IN;
  wire data_ram_serverAdapterB_cnt$EN;

  // register data_ram_serverAdapterB_s1
  reg [1 : 0] data_ram_serverAdapterB_s1;
  wire [1 : 0] data_ram_serverAdapterB_s1$D_IN;
  wire data_ram_serverAdapterB_s1$EN;

  // register instr_ram_serverAdapter_cnt
  reg [2 : 0] instr_ram_serverAdapter_cnt;
  wire [2 : 0] instr_ram_serverAdapter_cnt$D_IN;
  wire instr_ram_serverAdapter_cnt$EN;

  // register instr_ram_serverAdapter_s1
  reg [1 : 0] instr_ram_serverAdapter_s1;
  wire [1 : 0] instr_ram_serverAdapter_s1$D_IN;
  wire instr_ram_serverAdapter_s1$EN;

  // ports of submodule cpu
  wire [31 : 0] cpu$boot_boot_addr,
		cpu$dbus_addr_wdata_snd_fst,
		cpu$dbus_addr_wdata_snd_snd,
		cpu$dbus_rdata_read_data,
		cpu$ibus_addr,
		cpu$ibus_rdata_instr;
  wire cpu$EN_boot,
       cpu$EN_dbus_next,
       cpu$EN_dbus_rdata,
       cpu$EN_ibus_next,
       cpu$EN_ibus_rdata,
       cpu$RDY_boot,
       cpu$RDY_dbus_addr_wdata_fst,
       cpu$RDY_dbus_addr_wdata_snd_fst,
       cpu$RDY_dbus_addr_wdata_snd_snd,
       cpu$RDY_dbus_next,
       cpu$RDY_dbus_rdata,
       cpu$RDY_ibus_addr,
       cpu$RDY_ibus_next,
       cpu$RDY_ibus_rdata,
       cpu$dbus_addr_wdata_fst;

  // ports of submodule data_ram_memory
  wire [31 : 0] data_ram_memory$ADDRA,
		data_ram_memory$ADDRB,
		data_ram_memory$DIA,
		data_ram_memory$DIB,
		data_ram_memory$DOA,
		data_ram_memory$DOB;
  wire data_ram_memory$ENA,
       data_ram_memory$ENB,
       data_ram_memory$WEA,
       data_ram_memory$WEB;

  // ports of submodule data_ram_serverAdapterA_outDataCore
  wire [31 : 0] data_ram_serverAdapterA_outDataCore$D_IN,
		data_ram_serverAdapterA_outDataCore$D_OUT;
  wire data_ram_serverAdapterA_outDataCore$CLR,
       data_ram_serverAdapterA_outDataCore$DEQ,
       data_ram_serverAdapterA_outDataCore$EMPTY_N,
       data_ram_serverAdapterA_outDataCore$ENQ,
       data_ram_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule data_ram_serverAdapterB_outDataCore
  wire [31 : 0] data_ram_serverAdapterB_outDataCore$D_IN,
		data_ram_serverAdapterB_outDataCore$D_OUT;
  wire data_ram_serverAdapterB_outDataCore$CLR,
       data_ram_serverAdapterB_outDataCore$DEQ,
       data_ram_serverAdapterB_outDataCore$EMPTY_N,
       data_ram_serverAdapterB_outDataCore$ENQ,
       data_ram_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule instr_ram_memory
  wire [31 : 0] instr_ram_memory$ADDR,
		instr_ram_memory$DI,
		instr_ram_memory$DO;
  wire instr_ram_memory$EN, instr_ram_memory$WE;

  // ports of submodule instr_ram_serverAdapter_outDataCore
  wire [31 : 0] instr_ram_serverAdapter_outDataCore$D_IN,
		instr_ram_serverAdapter_outDataCore$D_OUT;
  wire instr_ram_serverAdapter_outDataCore$CLR,
       instr_ram_serverAdapter_outDataCore$DEQ,
       instr_ram_serverAdapter_outDataCore$EMPTY_N,
       instr_ram_serverAdapter_outDataCore$ENQ,
       instr_ram_serverAdapter_outDataCore$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_data_ram_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_data_ram_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq,
       WILL_FIRE_RL_instr_ram_serverAdapter_outData_setFirstEnq,
       WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways;

  // remaining internal signals
  wire [2 : 0] data_ram_serverAdapterA_cnt_3_PLUS_IF_data_ram_ETC___d89,
	       data_ram_serverAdapterB_cnt_40_PLUS_IF_data_ra_ETC___d146,
	       instr_ram_serverAdapter_cnt_6_PLUS_IF_instr_ra_ETC___d32;
  wire cpu_RDY_dbus_addr_wdata_snd_snd__95_AND_cpu_RD_ETC___d201;

  // submodule cpu
  mkRv32iCPU cpu(.CLK(CLK),
		 .RST_N(RST_N),
		 .boot_boot_addr(cpu$boot_boot_addr),
		 .dbus_rdata_read_data(cpu$dbus_rdata_read_data),
		 .ibus_rdata_instr(cpu$ibus_rdata_instr),
		 .EN_ibus_next(cpu$EN_ibus_next),
		 .EN_ibus_rdata(cpu$EN_ibus_rdata),
		 .EN_dbus_next(cpu$EN_dbus_next),
		 .EN_dbus_rdata(cpu$EN_dbus_rdata),
		 .EN_boot(cpu$EN_boot),
		 .ibus_addr(cpu$ibus_addr),
		 .RDY_ibus_addr(cpu$RDY_ibus_addr),
		 .RDY_ibus_next(cpu$RDY_ibus_next),
		 .RDY_ibus_rdata(cpu$RDY_ibus_rdata),
		 .dbus_addr_wdata_fst(cpu$dbus_addr_wdata_fst),
		 .RDY_dbus_addr_wdata_fst(cpu$RDY_dbus_addr_wdata_fst),
		 .dbus_addr_wdata_snd_fst(cpu$dbus_addr_wdata_snd_fst),
		 .RDY_dbus_addr_wdata_snd_fst(cpu$RDY_dbus_addr_wdata_snd_fst),
		 .dbus_addr_wdata_snd_snd(cpu$dbus_addr_wdata_snd_snd),
		 .RDY_dbus_addr_wdata_snd_snd(cpu$RDY_dbus_addr_wdata_snd_snd),
		 .RDY_dbus_next(cpu$RDY_dbus_next),
		 .RDY_dbus_rdata(cpu$RDY_dbus_rdata),
		 .RDY_boot(cpu$RDY_boot));

  // submodule data_ram_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd32),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(33'd4096)) data_ram_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(data_ram_memory$ADDRA),
					      .ADDRB(data_ram_memory$ADDRB),
					      .DIA(data_ram_memory$DIA),
					      .DIB(data_ram_memory$DIB),
					      .WEA(data_ram_memory$WEA),
					      .WEB(data_ram_memory$WEB),
					      .ENA(data_ram_memory$ENA),
					      .ENB(data_ram_memory$ENB),
					      .DOA(data_ram_memory$DOA),
					      .DOB(data_ram_memory$DOB));

  // submodule data_ram_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) data_ram_serverAdapterA_outDataCore(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(data_ram_serverAdapterA_outDataCore$D_IN),
								   .ENQ(data_ram_serverAdapterA_outDataCore$ENQ),
								   .DEQ(data_ram_serverAdapterA_outDataCore$DEQ),
								   .CLR(data_ram_serverAdapterA_outDataCore$CLR),
								   .D_OUT(data_ram_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(data_ram_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(data_ram_serverAdapterA_outDataCore$EMPTY_N));

  // submodule data_ram_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) data_ram_serverAdapterB_outDataCore(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(data_ram_serverAdapterB_outDataCore$D_IN),
								   .ENQ(data_ram_serverAdapterB_outDataCore$ENQ),
								   .DEQ(data_ram_serverAdapterB_outDataCore$DEQ),
								   .CLR(data_ram_serverAdapterB_outDataCore$CLR),
								   .D_OUT(data_ram_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(data_ram_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(data_ram_serverAdapterB_outDataCore$EMPTY_N));

  // submodule instr_ram_memory
  BRAM1Load #(.FILENAME("instruction_stream/instruction_stream_quicksort.txt"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd32),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(33'd4096),
	      .BINARY(1'd0)) instr_ram_memory(.CLK(CLK),
					      .ADDR(instr_ram_memory$ADDR),
					      .DI(instr_ram_memory$DI),
					      .WE(instr_ram_memory$WE),
					      .EN(instr_ram_memory$EN),
					      .DO(instr_ram_memory$DO));

  // submodule instr_ram_serverAdapter_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) instr_ram_serverAdapter_outDataCore(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(instr_ram_serverAdapter_outDataCore$D_IN),
								   .ENQ(instr_ram_serverAdapter_outDataCore$ENQ),
								   .DEQ(instr_ram_serverAdapter_outDataCore$DEQ),
								   .CLR(instr_ram_serverAdapter_outDataCore$CLR),
								   .D_OUT(instr_ram_serverAdapter_outDataCore$D_OUT),
								   .FULL_N(instr_ram_serverAdapter_outDataCore$FULL_N),
								   .EMPTY_N(instr_ram_serverAdapter_outDataCore$EMPTY_N));

  // rule RL_instr_ram_serverAdapter_outData_setFirstEnq
  assign WILL_FIRE_RL_instr_ram_serverAdapter_outData_setFirstEnq =
	     !instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outData_enqData$whas ;

  // rule RL_instr_ram_serverAdapter_outData_enqAndDeq
  assign WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq =
	     instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     instr_ram_serverAdapter_outData_deqCalled$whas &&
	     instr_ram_serverAdapter_outData_enqData$whas ;

  // rule RL_data_ram_serverAdapterA_outData_setFirstEnq
  assign WILL_FIRE_RL_data_ram_serverAdapterA_outData_setFirstEnq =
	     !data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outData_enqData$whas ;

  // rule RL_instr_ram_serverAdapter_stageReadResponseAlways
  assign WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways =
	     cpu$RDY_ibus_next && cpu$RDY_ibus_addr &&
	     (instr_ram_serverAdapter_cnt ^ 3'h4) < 3'd7 ;

  // rule RL_data_ram_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq =
	     data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     data_ram_serverAdapterA_outData_deqCalled$whas &&
	     data_ram_serverAdapterA_outData_enqData$whas ;

  // rule RL_data_ram_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways =
	     (data_ram_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     cycle >= 32'd15000 &&
	     cycle < 32'd15040 ;

  // rule RL_data_ram_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_data_ram_serverAdapterB_outData_setFirstEnq =
	     !data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterB_outData_enqData$whas ;

  // rule RL_data_ram_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq =
	     data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     data_ram_serverAdapterB_outData_deqCalled$whas &&
	     data_ram_serverAdapterB_outData_enqData$whas ;

  // inlined wires
  assign instr_ram_serverAdapter_outData_enqData$whas =
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     instr_ram_serverAdapter_s1[1] &&
	     instr_ram_serverAdapter_s1[0] ;
  assign instr_ram_serverAdapter_outData_outData$wget =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_setFirstEnq ?
	       instr_ram_memory$DO :
	       instr_ram_serverAdapter_outDataCore$D_OUT ;
  assign instr_ram_serverAdapter_outData_outData$whas =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_setFirstEnq ||
	     instr_ram_serverAdapter_outDataCore$EMPTY_N ;
  assign data_ram_serverAdapterA_outData_enqData$whas =
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     data_ram_serverAdapterA_s1[1] &&
	     data_ram_serverAdapterA_s1[0] ;
  assign data_ram_serverAdapterA_outData_outData$wget =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_setFirstEnq ?
	       data_ram_memory$DOA :
	       data_ram_serverAdapterA_outDataCore$D_OUT ;
  assign data_ram_serverAdapterA_outData_outData$whas =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_setFirstEnq ||
	     data_ram_serverAdapterA_outDataCore$EMPTY_N ;
  assign data_ram_serverAdapterA_cnt_1$whas =
	     cpu$RDY_dbus_next &&
	     cpu_RDY_dbus_addr_wdata_snd_snd__95_AND_cpu_RD_ETC___d201 &&
	     (!data_ram_serverAdapterA_writeWithResp$wget[1] ||
	      data_ram_serverAdapterA_writeWithResp$wget[0]) ;
  assign data_ram_serverAdapterA_writeWithResp$wget =
	     { cpu$dbus_addr_wdata_fst, 1'd0 } ;
  assign data_ram_serverAdapterA_writeWithResp$whas =
	     cpu$RDY_dbus_next &&
	     cpu_RDY_dbus_addr_wdata_snd_snd__95_AND_cpu_RD_ETC___d201 ;
  assign data_ram_serverAdapterA_s1_1$wget =
	     { 1'd1,
	       !data_ram_serverAdapterA_writeWithResp$wget[1] ||
	       data_ram_serverAdapterA_writeWithResp$wget[0] } ;
  assign data_ram_serverAdapterB_outData_enqData$whas =
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     data_ram_serverAdapterB_s1[1] &&
	     data_ram_serverAdapterB_s1[0] ;
  assign data_ram_serverAdapterB_outData_outData$wget =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_setFirstEnq ?
	       data_ram_memory$DOB :
	       data_ram_serverAdapterB_outDataCore$D_OUT ;
  assign data_ram_serverAdapterB_outData_outData$whas =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_setFirstEnq ||
	     data_ram_serverAdapterB_outDataCore$EMPTY_N ;
  assign instr_ram_serverAdapter_outData_deqCalled$whas =
	     cpu$RDY_ibus_rdata &&
	     (instr_ram_serverAdapter_outDataCore$EMPTY_N ||
	      instr_ram_serverAdapter_outData_enqData$whas) &&
	     instr_ram_serverAdapter_outData_outData$whas ;
  assign data_ram_serverAdapterA_outData_deqCalled$whas =
	     cpu$RDY_dbus_rdata &&
	     (data_ram_serverAdapterA_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterA_outData_enqData$whas) &&
	     data_ram_serverAdapterA_outData_outData$whas ;
  assign data_ram_serverAdapterB_outData_deqCalled$whas =
	     (data_ram_serverAdapterB_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterB_outData_enqData$whas) &&
	     data_ram_serverAdapterB_outData_outData$whas ;

  // register count
  assign count$D_IN = count + 32'd1 ;
  assign count$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;

  // register cycle
  assign cycle$D_IN = cycle + 32'd1 ;
  assign cycle$EN = 1'd1 ;

  // register data_ram_serverAdapterA_cnt
  assign data_ram_serverAdapterA_cnt$D_IN =
	     data_ram_serverAdapterA_cnt_3_PLUS_IF_data_ram_ETC___d89 ;
  assign data_ram_serverAdapterA_cnt$EN =
	     data_ram_serverAdapterA_cnt_1$whas ||
	     data_ram_serverAdapterA_outData_deqCalled$whas ;

  // register data_ram_serverAdapterA_s1
  assign data_ram_serverAdapterA_s1$D_IN =
	     { data_ram_serverAdapterA_writeWithResp$whas &&
	       data_ram_serverAdapterA_s1_1$wget[1],
	       data_ram_serverAdapterA_s1_1$wget[0] } ;
  assign data_ram_serverAdapterA_s1$EN = 1'd1 ;

  // register data_ram_serverAdapterB_cnt
  assign data_ram_serverAdapterB_cnt$D_IN =
	     data_ram_serverAdapterB_cnt_40_PLUS_IF_data_ra_ETC___d146 ;
  assign data_ram_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ||
	     data_ram_serverAdapterB_outData_deqCalled$whas ;

  // register data_ram_serverAdapterB_s1
  assign data_ram_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign data_ram_serverAdapterB_s1$EN = 1'd1 ;

  // register instr_ram_serverAdapter_cnt
  assign instr_ram_serverAdapter_cnt$D_IN =
	     instr_ram_serverAdapter_cnt_6_PLUS_IF_instr_ra_ETC___d32 ;
  assign instr_ram_serverAdapter_cnt$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ||
	     instr_ram_serverAdapter_outData_deqCalled$whas ;

  // register instr_ram_serverAdapter_s1
  assign instr_ram_serverAdapter_s1$D_IN =
	     { WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways,
	       1'b1 } ;
  assign instr_ram_serverAdapter_s1$EN = 1'd1 ;

  // submodule cpu
  assign cpu$boot_boot_addr = 32'd0 ;
  assign cpu$dbus_rdata_read_data =
	     data_ram_serverAdapterA_outData_outData$wget ;
  assign cpu$ibus_rdata_instr = instr_ram_serverAdapter_outData_outData$wget ;
  assign cpu$EN_ibus_next =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;
  assign cpu$EN_ibus_rdata =
	     cpu$RDY_ibus_rdata &&
	     (instr_ram_serverAdapter_outDataCore$EMPTY_N ||
	      instr_ram_serverAdapter_outData_enqData$whas) &&
	     instr_ram_serverAdapter_outData_outData$whas ;
  assign cpu$EN_dbus_next =
	     cpu$RDY_dbus_next &&
	     cpu_RDY_dbus_addr_wdata_snd_snd__95_AND_cpu_RD_ETC___d201 ;
  assign cpu$EN_dbus_rdata =
	     cpu$RDY_dbus_rdata &&
	     (data_ram_serverAdapterA_outDataCore$EMPTY_N ||
	      data_ram_serverAdapterA_outData_enqData$whas) &&
	     data_ram_serverAdapterA_outData_outData$whas ;
  assign cpu$EN_boot = cpu$RDY_boot && cycle == 32'd0 ;

  // submodule data_ram_memory
  assign data_ram_memory$ADDRA = cpu$dbus_addr_wdata_snd_fst >> 2 ;
  assign data_ram_memory$ADDRB = cycle - 32'd15000 ;
  assign data_ram_memory$DIA = cpu$dbus_addr_wdata_snd_snd ;
  assign data_ram_memory$DIB = 32'd0 ;
  assign data_ram_memory$WEA = cpu$dbus_addr_wdata_fst ;
  assign data_ram_memory$WEB = 1'd0 ;
  assign data_ram_memory$ENA = data_ram_serverAdapterA_writeWithResp$whas ;
  assign data_ram_memory$ENB =
	     WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ;

  // submodule data_ram_serverAdapterA_outDataCore
  assign data_ram_serverAdapterA_outDataCore$D_IN = data_ram_memory$DOA ;
  assign data_ram_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq ||
	     data_ram_serverAdapterA_outDataCore$FULL_N &&
	     !data_ram_serverAdapterA_outData_deqCalled$whas &&
	     data_ram_serverAdapterA_outData_enqData$whas ;
  assign data_ram_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_data_ram_serverAdapterA_outData_enqAndDeq ||
	     data_ram_serverAdapterA_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterA_outData_deqCalled$whas &&
	     !data_ram_serverAdapterA_outData_enqData$whas ;
  assign data_ram_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule data_ram_serverAdapterB_outDataCore
  assign data_ram_serverAdapterB_outDataCore$D_IN = data_ram_memory$DOB ;
  assign data_ram_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq ||
	     data_ram_serverAdapterB_outDataCore$FULL_N &&
	     !data_ram_serverAdapterB_outData_deqCalled$whas &&
	     data_ram_serverAdapterB_outData_enqData$whas ;
  assign data_ram_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_data_ram_serverAdapterB_outData_enqAndDeq ||
	     data_ram_serverAdapterB_outDataCore$EMPTY_N &&
	     data_ram_serverAdapterB_outData_deqCalled$whas &&
	     !data_ram_serverAdapterB_outData_enqData$whas ;
  assign data_ram_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule instr_ram_memory
  assign instr_ram_memory$ADDR = cpu$ibus_addr >> 2 ;
  assign instr_ram_memory$DI = 32'd0 ;
  assign instr_ram_memory$WE = 1'd0 ;
  assign instr_ram_memory$EN =
	     WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ;

  // submodule instr_ram_serverAdapter_outDataCore
  assign instr_ram_serverAdapter_outDataCore$D_IN = instr_ram_memory$DO ;
  assign instr_ram_serverAdapter_outDataCore$ENQ =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq ||
	     instr_ram_serverAdapter_outDataCore$FULL_N &&
	     !instr_ram_serverAdapter_outData_deqCalled$whas &&
	     instr_ram_serverAdapter_outData_enqData$whas ;
  assign instr_ram_serverAdapter_outDataCore$DEQ =
	     WILL_FIRE_RL_instr_ram_serverAdapter_outData_enqAndDeq ||
	     instr_ram_serverAdapter_outDataCore$EMPTY_N &&
	     instr_ram_serverAdapter_outData_deqCalled$whas &&
	     !instr_ram_serverAdapter_outData_enqData$whas ;
  assign instr_ram_serverAdapter_outDataCore$CLR = 1'b0 ;

  // remaining internal signals
  assign cpu_RDY_dbus_addr_wdata_snd_snd__95_AND_cpu_RD_ETC___d201 =
	     cpu$RDY_dbus_addr_wdata_snd_snd &&
	     cpu$RDY_dbus_addr_wdata_snd_fst &&
	     cpu$RDY_dbus_addr_wdata_fst &&
	     (data_ram_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign data_ram_serverAdapterA_cnt_3_PLUS_IF_data_ram_ETC___d89 =
	     data_ram_serverAdapterA_cnt +
	     (data_ram_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (data_ram_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign data_ram_serverAdapterB_cnt_40_PLUS_IF_data_ra_ETC___d146 =
	     data_ram_serverAdapterB_cnt +
	     (WILL_FIRE_RL_data_ram_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (data_ram_serverAdapterB_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign instr_ram_serverAdapter_cnt_6_PLUS_IF_instr_ra_ETC___d32 =
	     instr_ram_serverAdapter_cnt +
	     (WILL_FIRE_RL_instr_ram_serverAdapter_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (instr_ram_serverAdapter_outData_deqCalled$whas ? 3'd7 : 3'd0) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	data_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	data_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	data_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	data_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	instr_ram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	instr_ram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (cycle$EN) cycle <= `BSV_ASSIGNMENT_DELAY cycle$D_IN;
	if (data_ram_serverAdapterA_cnt$EN)
	  data_ram_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterA_cnt$D_IN;
	if (data_ram_serverAdapterA_s1$EN)
	  data_ram_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterA_s1$D_IN;
	if (data_ram_serverAdapterB_cnt$EN)
	  data_ram_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterB_cnt$D_IN;
	if (data_ram_serverAdapterB_s1$EN)
	  data_ram_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      data_ram_serverAdapterB_s1$D_IN;
	if (instr_ram_serverAdapter_cnt$EN)
	  instr_ram_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      instr_ram_serverAdapter_cnt$D_IN;
	if (instr_ram_serverAdapter_s1$EN)
	  instr_ram_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      instr_ram_serverAdapter_s1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 32'hAAAAAAAA;
    cycle = 32'hAAAAAAAA;
    data_ram_serverAdapterA_cnt = 3'h2;
    data_ram_serverAdapterA_s1 = 2'h2;
    data_ram_serverAdapterB_cnt = 3'h2;
    data_ram_serverAdapterB_s1 = 2'h2;
    instr_ram_serverAdapter_cnt = 3'h2;
    instr_ram_serverAdapter_s1 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) if (cycle > 32'd15060) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (instr_ram_serverAdapter_s1[1] &&
	  !instr_ram_serverAdapter_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (data_ram_serverAdapterA_s1[1] &&
	  !data_ram_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (data_ram_serverAdapterB_s1[1] &&
	  !data_ram_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if ((data_ram_serverAdapterB_outDataCore$EMPTY_N ||
	   data_ram_serverAdapterB_outData_enqData$whas) &&
	  data_ram_serverAdapterB_outData_outData$whas)
	$display("%d", $signed(data_ram_serverAdapterB_outData_outData$wget));
  end
  // synopsys translate_on
endmodule  // mkTb

